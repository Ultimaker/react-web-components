// Core layout component
//
// DO NOT apply dimension or offset utilities to the `layout` element. All cell
// widths and offsets should be applied to child layout cells.

//   layout container
//  ==========================================================================

//  All content must be contained within child `layout__item` elements.

.layout {
    box-sizing: border-box;
    display: flex;
    flex-flow: row wrap;
    padding: 0;
    margin: 0 (-0.5 * $layout-gutter-default);
}

// Modifier: center align all layout cells

.layout--align-center {
    justify-content: center;
}

// Modifier: right align all layout cells

.layout--align-right {
    justify-content: flex-end;
}

// Modifier: middle-align layout cells

.layout--align-middle {
    align-items: center;
}

// Modifier: bottom-align layout cells

.layout--align-bottom {
    align-items: flex-end;
}

// Modifier: stretch-align layout cells

.layout--align-stretch {
    align-items: stretch;
}

// Modifier: allow cells to equal distribute width
//
// 1. Provide all values to avoid IE10 bug with shorthand flex
//
//    Use `0%` to avoid bug in IE10/11 with unitless flex basis

.layout--fit > .layout__item {
    flex: 1 1 0%;
}

// Modifier: all cells match height of tallest cell in a row

.layout--equal-height > .layout__item {
    display: flex;
}

// Modifier: gutters. The gutter is the space between the items. 
// Builds a class in the format `.layout--gutter-sm` where sm is the is from the variable list $layout-spacing

@mixin layout-gutters($sizes) {
    @each $name, $value in $sizes {
        .layout--gutter-#{$name} {
            margin: 0 (-0.5 * $value);

            & > .layout__item {
                padding: 0 (0.5 * $value);
            }
        }

        .layout--gutter-#{$name}--above {
            margin-top: -0.5 * $value;

            & > .layout__item {
                padding-top: 0.5 * $value;
            }
        }

        .layout--gutter-#{$name}--below {
            margin-bottom: -0.5 * $value;

            & > .layout__item {
                padding-bottom: 0.5 * $value;
            }
        }
    }
}

@include layout-gutters($layout-spacing);

//   layout item
//  ==========================================================================

// No explicit width by default. Rely on combining `layout__item` with a dimension
// utility or a component class that extends 'layout'.
//
// 1. Set flex items to full width by default
// 2. Fix issue where elements with overflow extend past the
//    `layout__item` container

.layout__item {
    box-sizing: inherit;
    flex-basis: 100%;
    min-width: 0;
    padding: 0 (0.5 * $layout-gutter-default);

    &.layout--gutterBelow {
        padding-bottom: $layout-gutter-default;
    }
}

// Modifier: horizontally center one unit
// Set a specific unit to be horizontally centered. Doesn't affect
// any other units. Can still contain a child `layout` object.

.layout__item--center {
    margin: 0 auto;
}

.layout__item--left {
    -webkit-align-self: flex-start;
    align-self: flex-start;
}

.layout__item--right {
    margin-left: auto;
}

.layout__item--middle {
    -webkit-align-self: center;
    align-self: center;
}

.layout__item--bottom {
    -webkit-align-self: flex-end;
    align-self: flex-end;
}

//   layout widths
//  ==========================================================================

// Specify the proportional width of an object.
//
// Add breakpoint names for responsive widths.
// Responsive widths are for the breakpoint from the variable list $layout-breakpoints
//
// 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11

@mixin layout-widths($columns, $bp: null) {
    // Loop through the number of columns for each denominator of our fractions.
    @each $denominator in $columns {
        // Begin creating a numerator for our fraction up until we hit the denominator.
        @for $numerator from 1 through $denominator {
            // Build a class in the format `.u-3/4`
            .u-#{$numerator}\/#{$denominator} {
                flex-basis: ($numerator / $denominator * 100%) !important;
            }
        }
    }

    // If breakpoints are given, create columns for each one
    @if $bp {
        // Loop through the number of columns for each denominator of our fractions.
        @each $denominator in $columns {
            // Begin creating a numerator for our fraction up until we hit the denominator.
            @for $numerator from 1 through $denominator {
                @each $name, $value in $bp {
                    // Build a class in the format `.u-3/4-[<breakpoint>]`
                    // default sizing full
                    .u-#{$numerator}\/#{$denominator}-#{$name} {
                        @extend .u-full;
                    }

                    @media (min-width: $value) {
                        .u-#{$numerator}\/#{$denominator}-#{$name} {
                            flex-basis: ($numerator / $denominator * 100%) !important;
                        }
                    }
                }
            }
        }
    }
}

// Intrinsic widths
// ==========================================================================

@mixin layout-widths-intrinsic($bp: null) {
    // Make an element shrink wrap its content.

    .u-fit {
        flex-basis: auto;
    }

    // Make an element fill the remaining space.
    // 1. Be explicit to work around IE10 bug with shorthand flex
    // 2. IE10 ignores previous `flex-basis` value. Setting again here fixes

    .u-fill {
        flex: 1 1 0%;
        flex-basis: 0%;
    }

    // An alternative method to make an element fill the remaining space.
    // Distributes space based on the initial width and height of the element
    // http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg

    .u-fillAlt {
        flex: 1 1 auto;
        flex-basis: auto;
    }

    // Make an element the width of its parent.

    .u-full {
        flex-basis: 100%;
    }

    // Intrinsic widths at breakpoints from the variable list $layout-breakpoints
    @if $bp {
        @each $name, $value in $bp {
            @media (min-width: $value) {
                .u-fit-#{$name} {
                    flex-basis: auto !important;
                }

                .u-fill-#{$name} {
                    flex: 1 1 0%;
                    flex-basis: 0%;
                    width: auto !important;
                }

                .u-fillAlt-#{$name} {
                    flex: 1 1 auto;
                    flex-basis: auto;
                    width: auto !important;
                }

                .u-full-#{$name} {
                    flex-basis: 100%;
                }
            }
        }
    }
}

//   layout offsets
//  ==========================================================================

// Specify the proportional offset before or after an element.
// Add breakpoint names for responsive offsets from the variable list $layout-breakpoints

@mixin layout-offsets($columns, $bp: null) {
    // Loop through the number of columns for each denominator of our fractions.
    @each $denominator in $columns {
        // Begin creating a numerator for our fraction up until we hit the denominator.
        @for $numerator from 1 through $denominator {
            // Build a class in the format `.u-after-3/4`
            .u-after-#{$numerator}\/#{$denominator} {
                margin-right: $numerator / $denominator * 100%;
            }

            .u-before-#{$numerator}\/#{$denominator} {
                margin-left: $numerator / $denominator * 100%;
            }

            // If breakpoints are given, create offsets for each one
            @if $bp {
                @each $name, $value in $bp {
                    // Build a class in the format `.u-after-3/4-[<breakpoint>]`

                    @media (min-width: $value) {
                        .u-after-#{$numerator}\/#{$denominator}-#{$name} {
                            margin-right: $numerator / $denominator * 100%;
                        }

                        .u-before-#{$numerator}\/#{$denominator}-#{$name} {
                            margin-left: $numerator / $denominator * 100%;
                        }
                    }
                }
            }
        }
    }
}

@include layout-widths($layout-fractions, $layout-breakpoints);
@include layout-widths-intrinsic($layout-breakpoints);
@include layout-offsets($layout-fractions, $layout-breakpoints);


// Additional classes
// ==========================================================================

// Creates the padding classes
// Builds a class in the format `padding-sm` where sm is the is from the variable list $layout-spacing

@mixin layout-padding($sizes) {
    @each $name, $value in $sizes {
        $valueTB: $value;

        @if $value / 0.6 > 4 {
            $valueTB: $value - 1.2;
        }
        @else if $value / 0.6 >= 2 {
            $valueTB: $value - 0.6;
        }
        @else if $value / 0.6 == 1 {
            $valueTB: $value - 0.3;
        }

        .padding-#{$name} {
            padding: $valueTB $value;
        }
    }
}

@include layout-padding($layout-spacing);

// Creates the hide-{breakpoint} and show-{breakpoint} classes
// Builds a class in the format `hide-sm` where sm is the is from the variable list $layout-breakpoints

@mixin layout-hiding-rules($bp) {
    @each $name, $value in $bp {
        .show-#{$name} {
            @media (max-width: $value - 1) {
                display: none !important;
                visibility: hidden !important;
            }
        }

        .hide-#{$name} {
            display: block;

            @media (min-width: #{$value}) {
                display: none !important;
                visibility: hidden !important;
            }
        }
    }
}

@include layout-hiding-rules($layout-breakpoints);
